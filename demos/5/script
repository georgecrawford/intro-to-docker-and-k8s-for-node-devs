# Docker push
```
docker build -t georgecrawford/node-docker-k8s-demo:v1 .
docker push georgecrawford/node-docker-k8s-demo:v1
```

# Pod

```
kubectl create namespace demo
kubectl -n demo create -f pod.yaml
```

```
$ kubectl -n demo get pod nodejs -o wide
NAME          READY     STATUS    RESTARTS   AGE       IP            NODE
nodejs   1/1       Running   0          6m        172.17.0.19   minikube
```

If we were to SSH onto the virtual machine running kubernetes:
```
$ curl 172.17.0.19:8080
Hello world
```

# Service

The pod selector identifies the set of pods to load balance traffic to

```
$ kubectl -n demo create -f service.yaml
$ kubectl -n demo get service nodejs -o wide
NAME      CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE       SELECTOR
nodejs    10.0.0.2     <none>        8080/TCP   59s       app=nodejs
```

Then, from another pod somewhere in the cluster:
```
root@api-1288849698-vzh3n:/app# curl nodejs.demo:8080
Hello world
```


# Replica Set

First, delete the pod:
```
$ kubectl -n demo delete pod nodejs
pod "nodejs" deleted
```

kubectl -n demo create -f replicaset.yaml

$ kubectl -n demo get replicaset nodejs
NAME      DESIRED   CURRENT   READY     AGE       
nodejs    1         1         1         27s       

$ kubectl -n demo get pods
NAME           READY     STATUS    RESTARTS   AGE
nodejs-mks15   1/1       Running   0          2m

$ kubectl -n demo delete pod nodejs-mks15 && kubectl -n demo get replicaset nodejs
pod "nodejs-mks15" deleted
NAME      DESIRED   CURRENT   READY     AGE       
nodejs    1         1         0         3m        

$ kubectl -n demo get replicaset nodejs
NAME      DESIRED   CURRENT   READY     AGE       
nodejs    1         1         1         3m        

# Deployment
$ kubectl -n demo delete replicaset nodejs
replicaset "nodejs" deleted

$ kubectl -n demo create -f deployment.yaml
deployment "nodejs" created

$ kubectl -n demo get deployment nodejs
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nodejs    1         1         1            1           19s

$ kubectl -n demo get replicasets
NAME                DESIRED   CURRENT   READY     AGE
nodejs-3216280352   1         1         1         1m

$ kubectl -n demo get pods
NAME                      READY     STATUS    RESTARTS   AGE
nodejs-3216280352-ldhn1   1/1       Running   0          1m

$ kubectl -n demo scale --replicas=3 deployment/nodejs
deployment "nodejs" scaled

$ kubectl -n demo get pods
NAME                      READY     STATUS    RESTARTS   AGE
nodejs-3216280352-91dnn   1/1       Running   0          11s
nodejs-3216280352-ldhn1   1/1       Running   0          3m
nodejs-3216280352-nvn01   1/1       Running   0          11s

$ kubectl -n demo get deployment nodejs
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nodejs    3         3         3            3           3m

$ kubectl -n demo delete pods --all && kubectl -n demo rollout status deployment/nodejs
pod "nodejs-3216280352-91dnn" deleted
pod "nodejs-3216280352-ldhn1" deleted
pod "nodejs-3216280352-nvn01" deleted
Waiting for rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for rollout to finish: 2 out of 3 new replicas have been updated...
Waiting for rollout to finish: 0 of 3 updated replicas are available...
Waiting for rollout to finish: 1 of 3 updated replicas are available...
Waiting for rollout to finish: 2 of 3 updated replicas are available...
deployment "nodejs" successfully rolled out


# Ingress

kubectl -n demo create -f ingress.yaml

$ kubectl -n demo get ingress nodejs
NAME      HOSTS        ADDRESS          PORTS     AGE
nodejs    demo.local   192.168.99.100   80        4m

[add host to /etc/hosts]

$ curl -i demo.local
HTTP/1.1 200 OK
Server: nginx/1.13.3
Date: Tue, 24 Oct 2017 20:09:30 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 12
Connection: keep-alive
X-Powered-By: Express
ETag: W/"c-M6tWOb/Y57lesdjQuHeB1P/qTV0"

Hello world
